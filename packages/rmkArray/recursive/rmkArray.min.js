(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global['recursive/rmkArray'] = factory());
}(this, (function () { 'use strict';

/** @namespace rmkArray */

// import clear from './clear';
// import toSnakeCase from './toSnakeCase';
// import toCamelCase from './toCamelCase';
// import update from './update';
// import rename from './rename';
// import each from './each';

var rmkArrayActions = {};

var parseEntity = function parseEntity(entity, deep, config) {
  // isArray
  if (entity && entity.constructor === Array && (config.isRecursive || !config.isRecursive && deep == 0)) {
    // copy array
    entity = entity.slice(0);

    for (var j = 0, maxActions = config.actions.length; j < maxActions; j++) {
      //parse by action. copy object in utils eachKeys
      entity = config.actions[j](entity);
    }

    // deep parse array in deep
    if (config.isRecursive || !config.isRecursive && deep == 0) {
      var entitySize = entity.length;
      for (var i = 0; i < entitySize; i++) {
        entity[i] = parseEntity(entity[i], deep + 1, config);
      }
    }
  }
  return entity;
};

var rmkArrayParse = function rmkArrayParse(config) {
  return function (origin) {
    return parseEntity(origin, 0, config);
  };
};

var rmkArrayRecursiveActions = {};

Object.keys(rmkArrayActions).forEach(function (action) {

  rmkArrayRecursiveActions[action] = function (config) {
    return rmkArrayParse({
      actions: [rmkArrayActions[action](config)],
      isRecursive: true
    });
  };
});

var recursive = Object.assign(function () {
  for (var _len = arguments.length, actions = Array(_len), _key = 0; _key < _len; _key++) {
    actions[_key] = arguments[_key];
  }

  return rmkArrayParse({ actions: actions, isRecursive: true });
}, rmkArrayRecursiveActions);

return recursive;

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm1rQXJyYXkubWluLmpzIiwic291cmNlcyI6WyIuLi9zcmMvYWN0aW9ucy9pbmRleC5qcyIsIi4uL3NyYy91dGlscy9wYXJzZS5qcyIsIi4uL3NyYy9yZWN1cnNpdmUvcm1rQXJyYXkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBuYW1lc3BhY2Ugcm1rQXJyYXkgKi9cblxuLy8gaW1wb3J0IGNsZWFyIGZyb20gJy4vY2xlYXInO1xuLy8gaW1wb3J0IHRvU25ha2VDYXNlIGZyb20gJy4vdG9TbmFrZUNhc2UnO1xuLy8gaW1wb3J0IHRvQ2FtZWxDYXNlIGZyb20gJy4vdG9DYW1lbENhc2UnO1xuLy8gaW1wb3J0IHVwZGF0ZSBmcm9tICcuL3VwZGF0ZSc7XG4vLyBpbXBvcnQgcmVuYW1lIGZyb20gJy4vcmVuYW1lJztcbi8vIGltcG9ydCBlYWNoIGZyb20gJy4vZWFjaCc7XG5cbmV4cG9ydCBkZWZhdWx0IHt9O1xuIiwiY29uc3QgcGFyc2VFbnRpdHkgPSAoZW50aXR5LCBkZWVwLCBjb25maWcpID0+IHtcbiAgLy8gaXNBcnJheVxuICBpZiAoXG4gICAgZW50aXR5ICYmXG4gICAgZW50aXR5LmNvbnN0cnVjdG9yID09PSBBcnJheSAmJlxuICAgIChjb25maWcuaXNSZWN1cnNpdmUgfHwgKCFjb25maWcuaXNSZWN1cnNpdmUgJiYgZGVlcCA9PSAwKSlcbiAgKSB7XG4gICAgLy8gY29weSBhcnJheVxuICAgIGVudGl0eSA9IGVudGl0eS5zbGljZSgwKTtcblxuICAgIGZvciAobGV0IGogPSAwLCBtYXhBY3Rpb25zID0gY29uZmlnLmFjdGlvbnMubGVuZ3RoOyBqIDwgbWF4QWN0aW9uczsgaisrKSB7XG4gICAgICAvL3BhcnNlIGJ5IGFjdGlvbi4gY29weSBvYmplY3QgaW4gdXRpbHMgZWFjaEtleXNcbiAgICAgIGVudGl0eSA9IGNvbmZpZy5hY3Rpb25zW2pdKGVudGl0eSk7XG4gICAgfVxuXG4gICAgLy8gZGVlcCBwYXJzZSBhcnJheSBpbiBkZWVwXG4gICAgaWYgKGNvbmZpZy5pc1JlY3Vyc2l2ZSB8fCAoIWNvbmZpZy5pc1JlY3Vyc2l2ZSAmJiBkZWVwID09IDApKSB7XG4gICAgICBsZXQgZW50aXR5U2l6ZSA9IGVudGl0eS5sZW5ndGg7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVudGl0eVNpemU7IGkrKykge1xuICAgICAgICBlbnRpdHlbaV0gPSBwYXJzZUVudGl0eShlbnRpdHlbaV0sIGRlZXAgKyAxLCBjb25maWcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZW50aXR5O1xufTtcblxuY29uc3Qgcm1rQXJyYXlQYXJzZSA9IGNvbmZpZyA9PiBvcmlnaW4gPT4gcGFyc2VFbnRpdHkob3JpZ2luLCAwLCBjb25maWcpO1xuXG5leHBvcnQgZGVmYXVsdCBybWtBcnJheVBhcnNlO1xuIiwiaW1wb3J0IHJta0FycmF5QWN0aW9ucyBmcm9tICcuLy4uL2FjdGlvbnMnO1xuaW1wb3J0IHJta0FycmF5UGFyc2UgZnJvbSAnLi8uLi91dGlscy9wYXJzZSc7XG5cbmNvbnN0IHJta0FycmF5UmVjdXJzaXZlQWN0aW9ucyA9IHt9O1xuXG5PYmplY3Qua2V5cyhybWtBcnJheUFjdGlvbnMpLmZvckVhY2goYWN0aW9uID0+IHtcblxuICBybWtBcnJheVJlY3Vyc2l2ZUFjdGlvbnNbYWN0aW9uXSA9IGNvbmZpZyA9PlxuICAgIHJta0FycmF5UGFyc2Uoe1xuICAgICAgYWN0aW9uczogW3Jta0FycmF5QWN0aW9uc1thY3Rpb25dKGNvbmZpZyldLFxuICAgICAgaXNSZWN1cnNpdmU6IHRydWUsXG4gICAgfSk7XG59KTtcblxuY29uc3QgcmVjdXJzaXZlID0gT2JqZWN0LmFzc2lnbihcbiAgKC4uLmFjdGlvbnMpID0+IHJta0FycmF5UGFyc2UoeyBhY3Rpb25zLCBpc1JlY3Vyc2l2ZTogdHJ1ZSB9KSxcbiAgcm1rQXJyYXlSZWN1cnNpdmVBY3Rpb25zXG4pO1xuXG5leHBvcnQgZGVmYXVsdCByZWN1cnNpdmU7XG4iXSwibmFtZXMiOlsicGFyc2VFbnRpdHkiLCJlbnRpdHkiLCJkZWVwIiwiY29uZmlnIiwiY29uc3RydWN0b3IiLCJBcnJheSIsImlzUmVjdXJzaXZlIiwic2xpY2UiLCJqIiwibWF4QWN0aW9ucyIsImFjdGlvbnMiLCJsZW5ndGgiLCJlbnRpdHlTaXplIiwiaSIsInJta0FycmF5UGFyc2UiLCJvcmlnaW4iLCJybWtBcnJheVJlY3Vyc2l2ZUFjdGlvbnMiLCJPYmplY3QiLCJrZXlzIiwicm1rQXJyYXlBY3Rpb25zIiwiZm9yRWFjaCIsImFjdGlvbiIsInJlY3Vyc2l2ZSIsImFzc2lnbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7Ozs7OztBQVNBLHNCQUFlLEVBQWY7O0FDVEEsSUFBTUEsY0FBYyxTQUFkQSxXQUFjLENBQUNDLE1BQUQsRUFBU0MsSUFBVCxFQUFlQyxNQUFmLEVBQTBCOztNQUcxQ0YsVUFDQUEsT0FBT0csV0FBUCxLQUF1QkMsS0FEdkIsS0FFQ0YsT0FBT0csV0FBUCxJQUF1QixDQUFDSCxPQUFPRyxXQUFSLElBQXVCSixRQUFRLENBRnZELENBREYsRUFJRTs7YUFFU0QsT0FBT00sS0FBUCxDQUFhLENBQWIsQ0FBVDs7U0FFSyxJQUFJQyxJQUFJLENBQVIsRUFBV0MsYUFBYU4sT0FBT08sT0FBUCxDQUFlQyxNQUE1QyxFQUFvREgsSUFBSUMsVUFBeEQsRUFBb0VELEdBQXBFLEVBQXlFOztlQUU5REwsT0FBT08sT0FBUCxDQUFlRixDQUFmLEVBQWtCUCxNQUFsQixDQUFUOzs7O1FBSUVFLE9BQU9HLFdBQVAsSUFBdUIsQ0FBQ0gsT0FBT0csV0FBUixJQUF1QkosUUFBUSxDQUExRCxFQUE4RDtVQUN4RFUsYUFBYVgsT0FBT1UsTUFBeEI7V0FDSyxJQUFJRSxJQUFJLENBQWIsRUFBZ0JBLElBQUlELFVBQXBCLEVBQWdDQyxHQUFoQyxFQUFxQztlQUM1QkEsQ0FBUCxJQUFZYixZQUFZQyxPQUFPWSxDQUFQLENBQVosRUFBdUJYLE9BQU8sQ0FBOUIsRUFBaUNDLE1BQWpDLENBQVo7Ozs7U0FJQ0YsTUFBUDtDQXZCRjs7QUEwQkEsSUFBTWEsZ0JBQWdCLFNBQWhCQSxhQUFnQjtTQUFVO1dBQVVkLFlBQVllLE1BQVosRUFBb0IsQ0FBcEIsRUFBdUJaLE1BQXZCLENBQVY7R0FBVjtDQUF0Qjs7QUN2QkEsSUFBTWEsMkJBQTJCLEVBQWpDOztBQUVBQyxPQUFPQyxJQUFQLENBQVlDLGVBQVosRUFBNkJDLE9BQTdCLENBQXFDLGtCQUFVOzsyQkFFcEJDLE1BQXpCLElBQW1DO1dBQ2pDUCxjQUFjO2VBQ0gsQ0FBQ0ssZ0JBQWdCRSxNQUFoQixFQUF3QmxCLE1BQXhCLENBQUQsQ0FERzttQkFFQztLQUZmLENBRGlDO0dBQW5DO0NBRkY7O0FBU0EsSUFBTW1CLFlBQVlMLE9BQU9NLE1BQVAsQ0FDaEI7b0NBQUliLE9BQUo7V0FBQTs7O1NBQWdCSSxjQUFjLEVBQUVKLGdCQUFGLEVBQVdKLGFBQWEsSUFBeEIsRUFBZCxDQUFoQjtDQURnQixFQUVoQlUsd0JBRmdCLENBQWxCOzs7Ozs7OzsifQ==
